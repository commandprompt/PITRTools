#!/usr/bin/env python

""" LICENSE

Copyright Command Prompt, Inc.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose, without fee, and without a written agreement
is hereby granted, provided that the above copyright notice and this
paragraph and the following two paragraphs appear in all copies.

IN NO EVENT SHALL THE COMMAND PROMPT, INC. BE LIABLE TO ANY PARTY FOR
DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
EVEN IF THE COMMAND PROMPT, INC. HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE COMMAND PROMPT, INC. SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN
"AS IS" BASIS, AND THE COMMAND PROMPT, INC. HAS NO OBLIGATIONS TO
PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

"""

# $Id$

import os
import re
import sys
import subprocess
from cmd_worker import CMDWorker

argslist = (("-C", "--config",
             dict(dest="configfilename",
                  action="store",
                  help="the name of the archiver config file",
                  metavar="FILE",
                  default='cmd_archiver.ini')),
            ('-F', '--file',
             dict(dest="archivefile",
                  action="store",
                  help="Archive file",
                  metavar="FILE")),
            ("-I", "--init",
             dict(dest="init",
                  action="store_true",
                  help="Initialize master environment")))

classdict = (('state', 's', None),
            ('rsync_flags', 's', ""),
            ('slaves', 's', None),
            ('user', 's', None),
            ('r_archivedir', 's', None),
            ('l_archivedir', 's', None),
            ('ssh_timeout', 'i', None),
            ('notify_ok', 's', None),
            ('notify_warning', 's', None),
            ('notify_critical', 's', None),
            ('debug', 'b', False),
            ('pgdata', 's', None),
            ('pgcontroldata', 's', ""),
            ('rsync_version', 'i', None),
            ('includepath', 's', None),
            ('ssh_debug', 'b', False))


class CMDArchiver(CMDWorker):

    def init_env_func(self):
        """
        Initialize the local queues so we can check each directory for left
        over files
        """
        self.debuglog("init_env_func(): entered")
        # bail out if archivedir exists and not empty or inaccessible.
        if os.access(self.l_archivedir, os.F_OK):
            if not os.access(self.l_archivedir, os.R_OK | os.W_OK | os.X_OK):
                raise Exception("init_env_func(): l_archivedir %s must have r/w/x bits set for the current user" % self.l_archivedir)

            elif any(os.listdir(self.l_archivedir)):
                raise Exception("init_env_func(): l_archivedir %s must be be empty" % self.l_archivedir)

            else:
                self.log("init_env_func(): l_archivedir %s already exists" % self.l_archivedir, "WARNING")

        mode = 0700
        if not os.path.exists(self.l_archivedir):
            os.mkdir(self.l_archivedir, mode)
        for slave in self.slaves_list:
            os.mkdir(os.path.join(self.l_archivedir, slave), mode)

    def check_config(self):
        super(CMDArchiver, self).check_config()

        self.cmd_queue = os.path.join(self.pitr_bin_path, "cmd_queue")
        pathvars = [self.pgdata, self.cmd_queue]
        if not self.options.init:
            pathvars.append(self.l_archivedir)
        self.check_paths(pathvars)

        if not os.access(self.cmd_queue, os.X_OK):
            raise Exception("The cmd_queue file must have executable flag set.")

    def get_pgcontroldata_func(self):
        """
        get_pgcontroldata_func doesn't actually do anything yet. This is more
        for archival purposes so we can remember the regex
        """
        if not self.pgcontroldata:
            print 'WARNING: path to pg_controldata utility is not set, assuming it\'s in PATH'
            pgcontroldata = 'pg_controldata'
        else:
            pgcontroldata = self.pgcontroldata
        try:
            cmd = os.popen("%s %s" % (str(pgcontroldata), str(self.pgdata)))
            #return cmd.readlines
            for row in cmd:
                match = re.search('^Prior checkpoint location: *.{1,}', '%s' % (str(row)))
                if match != None:
                    print match
        except OSError, e:
            self.log("get_pgcontroldata_func(): %s" % e, "ERROR")
            exit(1)

    def archive_func(self):
        self.log("Archiving %s" % self.options.archivefile)

        if self.state != "online":
            self.notify_external(log=True, warning=True, message="cmd_archiver offline, queuing archives")
            return False

        try:
            # It is tempting to just hardlink it, but we need to make
            # at least one full copy since postgres might want to
            # recycle the WAL file at the same inode.  The cmd_queue
            # will establish hardlinks to individual slave subdirs,
            # thus no extra space is taken by the WAL queue.
            
            # Local rsync does a better job when the file is already
            # there (e.g. when cmd_queue is at fault).
            self.debuglog("local rsync %s to %s/" % (self.options.archivefile, self.l_archivedir))
            rsync = [self.rsync,
                     os.path.join(self.pgdata, self.options.archivefile),
                     os.path.join(self.l_archivedir, "")]
            ret = subprocess.call(rsync)
            if ret != 0:
                self.notify_external(log=True, critical=True, message=("local rsync returned error status: %d" % ret))
                return False

            # We call cmd_queue every time and let it figure itself if
            # there's a copy running already.  In case there is none,
            # the daemon flag comes handy.
            cmd_queue = [self.cmd_queue, "-C", self.options.configfilename,
                         "--daemon"]
            self.debuglog("running cmd_queue as: %s" % repr(cmd_queue))
            ret = subprocess.call(cmd_queue)
            if ret != 0:
                self.notify_external(log=True, critical=True, message=("cmd_queue returned error status: %d" % ret))
                return False
            return True
        except Exception, e:
            self.notify_external(log=True, critical=True, message=("Failed to archive file '%s': %s" % (self.options.archivefile, e)))
            return False

    def main(self):
        # before we do anything, let's just check who we are
        if os.geteuid() == 0:
            exit("\nBad Mojo... no root access for this script\n")

        retval = 0
        try:
            self.parse_commandline_arguments(argslist)
            self.load_configuration_file()

            if self.options.init:
                print "We are initializing queues, one moment."
                self.init_env_func()
            else:
                self.debuglog("Archiver running")
                if self.options.archivefile:
                    self.archive_func()
                else:
                    print "Config OK.  Use -F FILE to actually archive one."

        except Exception, e:
            self.log(e, "ERROR")
            retval = 1

        self.debuglog("Archiver exiting with status %d" % retval)
        return retval


if __name__ == '__main__':
    archiver = CMDArchiver(classdict)
    retval = archiver.main()
    exit(retval)
